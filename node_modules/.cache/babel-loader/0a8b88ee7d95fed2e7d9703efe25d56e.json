{"remainingRequest":"/home/gabriel/GitHub/Nomu/nomu/node_modules/thread-loader/dist/cjs.js!/home/gabriel/GitHub/Nomu/nomu/node_modules/babel-loader/lib/index.js!/home/gabriel/GitHub/Nomu/nomu/node_modules/vuetify-loader/lib/loader.js!/home/gabriel/GitHub/Nomu/nomu/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/gabriel/GitHub/Nomu/nomu/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/gabriel/GitHub/Nomu/nomu/src/components/GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/gabriel/GitHub/Nomu/nomu/src/components/GoogleMap.vue","mtime":1551062007490},{"path":"/home/gabriel/GitHub/Nomu/nomu/node_modules/cache-loader/dist/cjs.js","mtime":1550438830933},{"path":"/home/gabriel/GitHub/Nomu/nomu/node_modules/thread-loader/dist/cjs.js","mtime":1550438835601},{"path":"/home/gabriel/GitHub/Nomu/nomu/node_modules/babel-loader/lib/index.js","mtime":1550438830853},{"path":"/home/gabriel/GitHub/Nomu/nomu/node_modules/vuetify-loader/lib/loader.js","mtime":1550438836157},{"path":"/home/gabriel/GitHub/Nomu/nomu/node_modules/cache-loader/dist/cjs.js","mtime":1550438830933},{"path":"/home/gabriel/GitHub/Nomu/nomu/node_modules/vue-loader/lib/index.js","mtime":1550438835781}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { db } from '../main';\nexport default {\n  data: function data() {\n    return {\n      center: {},\n      markers: [],\n      infoContent: '',\n      infoWindowPos: null,\n      infoWinOpen: true,\n      currentMidx: null,\n      infoOptions: {\n        pixelOffset: {\n          width: 0,\n          height: -35\n        }\n      },\n      zoom: 13\n    };\n  },\n  firestore: function firestore() {\n    return {\n      markers: db.collection('markers')\n    };\n  },\n  mounted: function mounted() {\n    this.geolocate();\n    this.attMap();\n  },\n  methods: {\n    attMap: function attMap() {\n      if (localStorage.getItem(\"zoom\") == null) {\n        this.zoom = 9;\n      } else {\n        this.zoom = Number(localStorage.getItem(\"zoom\"));\n      }\n\n      if (localStorage.getItem(\"lat\") == null) {\n        this.center = {\n          lat: 31.508,\n          lng: -3.587\n        };\n      } else {\n        this.center = {\n          lat: Number(localStorage.getItem(\"lat\")),\n          lng: Number(localStorage.getItem(\"lng\"))\n        };\n      }\n    },\n    storeCenter: function storeCenter() {\n      this.$refs.mapRef.$mapPromise.then(function (map) {\n        localStorage.setItem(\"lat\", map.getCenter().lat());\n        localStorage.setItem(\"lng\", map.getCenter().lng());\n      });\n    },\n    storeZoom: function storeZoom() {\n      this.$refs.mapRef.$mapPromise.then(function (map) {\n        localStorage.setItem(\"zoom\", map.getZoom());\n      });\n    },\n    onMarkerClick: function onMarkerClick(marker) {\n      this.infoWindowPos = marker;\n      this.infoContent = 'Cistern ' + marker.id;\n\n      if (this.currentMidx == marker.id && this.infoWinOpen == true && marker.id != 0) {\n        this.$router.push({\n          name: 'graficos',\n          params: {\n            Pid: marker.id\n          }\n        });\n      } else {\n        this.infoWinOpen = true;\n        this.currentMidx = marker.id;\n      }\n    },\n    geolocate: function geolocate() {\n      var _this = this;\n\n      if (localStorage.getItem(\"lat\") == null) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          _this.center = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          /*var userMarker = {\n              id: '00',\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n          }\n           this.markers.push(userMarker);*/\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<gmap-map\n        ref=\"mapRef\"\n\t\t:center=\"center\"\n\t\t:zoom=\"this.zoom\"\n        @zoom_changed=\"storeZoom\"\n        @center_changed=\"storeCenter\"\n\t>   \n\n        <GmapMarker\n            :key=\"marker\"\n            v-for=\"(m, marker) in markers\"\n            :position=\"m\"\n            :clickable=\"true\"\n            :draggable=\"false\"\n            @click=\"onMarkerClick(m)\"\n        />\n\n        <gmap-info-window :options=\"infoOptions\" :position=\"infoWindowPos\" :opened=\"infoWinOpen\" @closeclick=\"infoWinOpen=false\">\n            <h3>{{infoContent}}</h3>\n            Click again to view\n        </gmap-info-window>\n\n\t</gmap-map>\n</template>\n\n<script>\n    import { db } from '../main'\n\texport default {\n\t    data () {\n\t        return {\n                center: {},\n                markers: [],\n                infoContent: '',\n                infoWindowPos: null,\n                infoWinOpen: true,\n                currentMidx: null,\n                infoOptions: {\n                    pixelOffset: {\n                        width: 0,\n                        height: -35\n                    }\n                },\n                zoom: 13\n\t        }\n        },\n        firestore (){\n            return{\n                markers: db.collection('markers')\n            }\n        },\n        mounted() {\n            this.geolocate();\n            this.attMap();\n        },\n\t    methods: {\n            attMap(){\n                if(localStorage.getItem(\"zoom\") == null){\n                    this.zoom = 9;\n                }\n                else{\n                    this.zoom = Number(localStorage.getItem(\"zoom\"));\n                }\n\n                if(localStorage.getItem(\"lat\") == null){\n                    this.center = { lat: 31.508, lng: -3.587 };\n                }\n                else{\n                    this.center = {\n                        lat : Number(localStorage.getItem(\"lat\")),\n                        lng : Number(localStorage.getItem(\"lng\"))\n                    }\n                }\n            },\n            storeCenter(){\n                this.$refs.mapRef.$mapPromise.then((map) => {\n                    localStorage.setItem(\"lat\", map.getCenter().lat());\n                    localStorage.setItem(\"lng\", map.getCenter().lng());\n                });     \n            },\n            storeZoom(){\n                this.$refs.mapRef.$mapPromise.then((map) => {\n                    localStorage.setItem(\"zoom\", map.getZoom());\n                });                \n            },\n            onMarkerClick (marker) {\n                this.infoWindowPos = marker;\n                this.infoContent = 'Cistern ' + marker.id;\n\n                if (this.currentMidx == marker.id && this.infoWinOpen == true && marker.id != 0) {\n                    this.$router.push({ name: 'graficos',params:{Pid:marker.id} })\n                }\n                else {\n                    this.infoWinOpen = true;\n                    this.currentMidx = marker.id;\n\n                }\n            },\n            geolocate: function() {\n                if(localStorage.getItem(\"lat\") == null){\n                    navigator.geolocation.getCurrentPosition(position => {\n                        this.center = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        };\n\n                        /*var userMarker = {\n                            id: '00',\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        }\n\n                        this.markers.push(userMarker);*/\n                    });\n                }\n            }\n        }\n\t}\n</script>\n\n<style>\n    .vue-map-container{\n        height:calc(100vh - 95px);\n    }\n</style>"],"sourceRoot":"src/components"}]}